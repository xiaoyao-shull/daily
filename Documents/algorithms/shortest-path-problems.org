#+TITLE: Shortest Path Problems
#+OPTIONS: html-style:nil p:t
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../static/css/reset.css" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../static/css/style.css" />
#+HTML_HEAD: <script src="../../static/js/jquery.js"></script>
#+HTML_HEAD: <script src="../../static/js/script.js"></script>

* Single Source Shortest Path Problems in Directed Acyclic Networks
  + A topological ordering of nodes is available for a directed acyclic network such that for any $(i, j) \in A$, $i$ appears before $j$ in the ordering.
  + Two similar algorithms based on this topological ordering can be established.
  + The complexity is $O(m)$ for both algorithms, since each arc is examined exactly once in each execution.
  + The reaching algorithm is prefered since we usually maintain the adjacent-list $A(i)$ for node $i \in N$.

** The Pulling Algorithm
   #+BEGIN_VERSE
     *algorithm* Pulling;
     *begin*
         $d(s) \leftarrow 0, \mbox{pred}(s) \leftarrow 0$;
         $d(i) \leftarrow \infty$ for all $i \in N - \{ s \}$;
         *for* each node $j \in N$ in topological ordering *do*
             *for* all arc $(i, j), i \in N$ *do*
                 *if* $d(j) > d(i) + c_{ij}$ *then*
                 *begin*
                     $d(j) \leftarrow d(i) + c_{ij}$;
                     $\mbox{pred}(i) \leftarrow j$;
                 *end*;
     *end*;
   #+END_VERSE

** The Reaching Algorithm
   #+BEGIN_VERSE
     *algorithm* Reaching;
     *begin*
         $d(s) \leftarrow 0, \mbox{pred}(s) \leftarrow 0$;
         $d(i) \leftarrow \infty$ for all $i \in N - \{ s \}$;
         *for* each node $i \in N$ in topological ordering *do*
             *for* all arc $(i, j), j \in N$ *do*
                 *if* $d(j) > d(i) + c_{ij}$ *then*
                 *begin*
                     $d(j) \leftarrow d(i) + c_{ij}$;
                     $\mbox{pred}(i) \leftarrow j$;
                 *end*;
     *end*;
   #+END_VERSE

* Single Source Shortest Path Problems in Networks With No Negative Arc Length

** Dijkstra Algorithm
   #+BEGIN_VERSE
     *algorithm* Dijkstra's;
     *begin*
         $S \leftarrow \emptyset, \bar S \leftarrow N$;
         $d(s) \leftarrow 0, \mbox{pred}(s) \leftarrow 0$;
         $d(s) \leftarrow \infty$ for all $i \in N - \{ s \}$;
         *while* $|S| < n$ *do*
         *begin*
             let $i \in \bar S$ be some node such that $d(i) = \mbox{min} \{ d(j) : j \in \bar S \}$;
             $S \leftarrow S \cup \{ i \}$;
             $\bar S \leftarrow \bar S - \{ i \}$;
             *for* each $(i, j) \in A(i)$ *do*
                 *if* $d(j) > d(i) + c_{ij}$ *then*
                 *begin*
                     $d(j) \leftarrow d(i) + c_{ij}$;
                     $\mbox{pred}(j) \leftarrow i$;
                 *end*;
         *end*;
     *end*;
   #+END_VERSE
   + The node selecting operations cost $O(n^2)$.
   + The distance updating operations cost $O(m)$.
   + Since the upper bound of $m$ is $O(n^2)$, Dijkstra's algorithm runs in $O(n^2)$.

** Optimization: Bidiretional Search
   + We perform two instances of Dijkstra's algorithm in parallel.
   + The forward one is as usual, we assign distance label $d(i)$ to node $i \in N$, and mutually divide nodes into $S$ and $\bar S$.
   + The backward one treats the sink node $t$ as the source node, and an arc $(i, j) \in A$ as an arc $(j, i)$.
   + The backward Dijkstra's algorithm assign distance label $d'(i)$ to node $i \in N$, and mutually divide nodes into $S'$ and $\bar{S'}$.
   + How we altering between forward and backward Dijkstra's algorithms does not matter.
   + The algorithm terminates when there exists a node $k$ such that $k \in S \cap S'$.
   + Note that the node $k$ is not necessarily in a shortest path.
   + In fact the shortest path is $\min \{ d(i) + d'(i): i \in S \cup S' \}$.
   + As a proof, consider some shortest path $P$, whose length is $L$, from $s$ to $t$ that does not pass the node $k$.
   + Suppose that nodes $p$ and $q$ are respectively the first and the last node not in $S \cup S'$ along path $P$.
   + $d(p)$ is optimal at the moment, since $p$ can be reached by some node in $S$.
   + Likewise, $d'(q)$ is also optimal.
   + $p \not \in S$ and $k \in S \implies d(k) \le d(p)$, otherwise we won't choose $k$ from $\bar S$ before choosing $p$.
   + Likewise, $q \not \in S'$ and $k \in S' \implies d'(k) \le d'(q)$.
   + Now we can enumerate over the existence of $p$ and $q$:
     - If $p$ and $q$ are different nodes, then $d(k) + d'(k) \le d(p) + d'(q) < L$, which is impossible.
     - If $p$ and $q$ are the same node, then $L \le d(k) + d'(k) \le d(p) + d'(q) = L$, which implies $d(k) + d'(k) = L$.
     - If $p$ and $q$ do not exist, then $i \in S \cup S'$ for all $i \in P$, and $d(i) + d'(i) = L$.


** Optimization: Heap
   + We concern ourselves with the following operations of the heap data structure:
     - $\mbox{create-heap}(H)$
     - $\mbox{find-min}(H)$
     - $\mbox{insert}(H, i)$
     - $\mbox{decrease-key}(H, i, \Delta)$
     - $\mbox{delete-min}(H)$
   + For convenience, we represent the decrease-key operation as $\mbox{decrease-key}(H, i, i')$ where $i'$ is the updated value of $i$.
   #+BEGIN_VERSE
     *algorithm* Heap Dijkstra's;
     *begin*
         $d(s) \leftarrow 0, \mbox{pred}(s) \leftarrow 0$;
         $d(s) \leftarrow \infty$ for all $i \in N - \{ s \}$;
         $\mbox{create-heap}(H)$;
         $\mbox{insert}(H, s)$;
         *while* $H \neq \emptyset$ *do*
         *begin*
             $i \leftarrow \mbox{find-min}(H)$;
             $\mbox{delete-min}(H)$;
             *for* each $(i, j) \in A(i)$ *do*
                 *if* $d(j) > d(i) + c_{ij}$ *then*
                 *begin*
                     $d(j) \leftarrow d(i) + c_{ij}$;
                     $\mbox{pred}(j) \leftarrow i$;
                     *if* $d(j) = \infty$ *then* $\mbox{insert}(H, j)$;
                     *else* $\mbox{decrease-key}(H, j, d(i) + c_{ij})$;
                 *end*;
         *end*;
     *end*;
   #+END_VERSE
   + Different heap implementations give different complexities:
     |                       | Binary Heap        | Fibonacci Heap     |
     |-----------------------+--------------------+--------------------|
     | $\mbox{create-heap}$  | $\Theta(1)$        | $\Theta(1)$        |
     | $\mbox{find-min}$     | $\Theta(n)$        | $O(n)$ (amortized) |
     | $\mbox{insert}$       | $O(\log n)$        | $\Theta(1)$        |
     | $\mbox{decrease-key}$ | $O(\log n)$        | $\Theta(1)$        |
     | $\mbox{delete-min}$   | $\Theta(\log n)$   | $\Theta(1)$        |
     |-----------------------+--------------------+--------------------|
     | Dijkstra's Complexity | $O((m + n)\log n)$ | $O(m + n\log n)$   |

** Optimization: Dial's Implementation
   + Dial's implementation avoids node selecting operations by using $(1 + nC)$ buckets to hold nodes when their distance labels are finite but not confirmed as optimal.
   + Each bucket corresponds to a unique distance from the source node along some directed path.
   + Nodes in each bucket are kept in doubly linked list, making adding/removing a node cost only $O(1)$.
   + The number of buckets can be reduced to $(1 + C)$, since whenever we update $d(j)$ with $d(i) + c_{ij}$, the updated value falls in $[d(i), d(i) + C]$.
   + The complexity of this implementation is $O(m + nC)$.

* Single Source Shortest Path Problems in Networks With Arbitrary Arc Lengths

** Optimality Condition
   + The distance label $d(\cdot)$ represent the shortest path length if and only if $d(j) \le d(i) + c_{ij}$ for all arc $(i, j) \in A$.
   + This condition is necessary since otherwise there exists a path whose length is $d(i) + c_{ij}$, and $d(j)$ is not the shortest path length.
   + This condition is sufficient, consider an arbitrary directed path $P$ from node $s$ to $i$, represented by $s = i_1 - i_2 - \cdots - i_k = i$.
     $$
     \displaylines{
         d(i_k)       & \le    & d(i_{k - 1}) + c_{k - 1, k}\cr
         d(i_{k - 1}) & \le    & d(i_{k - 2}) + c_{k - 2, k - 1}\cr
                      & \vdots &\cr
         d(i_2)       & \le    & d(i_1) + c_{12}
     }
     $$
   + These inequities along with $d(i_1) = d(s) = 0$ imply $d(i) = d(i_k) \le c_{12} + c_{23} + \cdots + c_{n-1,n} = \sum_{(i, j)\in P} c_{ij}$.
   + The length of any directed path from $s$ to $i$ is no more then $d(i)$, and by definition $d(i)$ equals the length of some directd path from $s$ to $i$, we know that $d(i)$ is the shortest path length.

** Generic Label-Correcting Algorithm
   #+BEGIN_VERSE
   *algorithm* generic label-correcting;
   *begin*
       $d(s) \leftarrow 0, \mbox{pred}(s) \leftarrow 0$;
       $d(i) \leftarrow \infty$ for all $i \in N - \{ s \}$;
       *while* there exists an arc $(i, j)$ such that $d(j) > d(i) + c_{ij}$ *do*
       *begin*
           $d(j) \leftarrow d(i) + c_{ij}$;
           $pred(j) \leftarrow i$;
       *end*;
   *end*;
   #+END_VERSE
   + Correctness: the optimality condition is satisfied when the algorithm terminates.
   + Finiteness: the distance label is either marked as infinite or falls in $[-C, C]$, and in each iteration we decrease some distance label.
   + Complexity: $O(n^2C)$, considering number of times we decrease some distance label.

** Modified Label-Correcting Algorithm
   #+BEGIN_VERSE
   *algorithm* modified label-correcting;
   *begin*
       $d(s) \leftarrow 0, \mbox{pred}(s) \leftarrow 0$;
       $d(i) \leftarrow \infty$ for all $i \in N - \{ s \}$;
       $\mbox{LIST} \leftarrow \{ s \}$
       *while* $\mbox{LIST} \neq \emptyset$ *do*
       *begin*
           remove a node $i$ from $\mbox{LIST}$;
           *for* each arc $(i, j) \in A$ *do*
               *if* $d(j) > d(i) + c_{ij}$ *do*
               *begin*
                   $d(j) \leftarrow d(i) + c_{ij}$;
                   $pred(j) \leftarrow i$;
                   *if* $j \not\in \mbox{LIST}$ *then* add $j$ to $\mbox{LIST}$;
               *end*;
       *end*;
   *end*;
   #+END_VERSE
   + Complexity: $O(mnC)$, considering number of times we add a node to $\mbox{LIST}$.

** Modified Label-Correcting Algorithm Implementations
*** TODO FIFO Implementation
*** TODO Dequeue Implementation

** TODO Detecting Negative Cycles

* All-Pair Shortest Path Problems in Networks With Arbitrary Arc Lengths

** TODO Repeated Shortest Path Algorithm
** TODO Generic Label-Correcting Algorithm
** TODO Floyd-Warshall Algorithm
** TODO Detecting Negative Cycles
